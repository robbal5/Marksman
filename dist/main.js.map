{"version":3,"sources":["webpack://marksman/./src/scripts/clouds.js","webpack://marksman/./src/scripts/cannon.js","webpack://marksman/./src/scripts/target.js","webpack://marksman/./src/scripts/sounds.js","webpack://marksman/./src/scripts/projectile.js","webpack://marksman/./src/scripts/game.js","webpack://marksman/./src/index.js","webpack://marksman/./src/scripts/background.js","webpack://marksman/./src/scripts/gameover.js","webpack://marksman/./src/scripts/modal.js"],"names":["Cloud","posX","posY","cropStartX","cropStartY","cropEndX","cropEndY","sizeX","sizeY","source","this","speed","Math","random","canvas","ctx","drawImage","newXPos","floor","width","Cannon","picture","Image","src","x","y","height","frameX","frameY","firing","rotation","state","save","translate","rotate","restore","bool","newValue","radians","standardRadians","cos","sin","Target","xPos","yPos","player","flyPos","range","size","flyUp","flyDown","Sound","id","sound","document","getElementById","play","pause","currentTime","Projectile","power","angle","projectile","dy","dx","xSize","ySize","hit","timer","strike","miss","shoot","game","multiplayer","currentPlayer","targets","that","stop","previousShotsHit","result","forEach","target","Game","numShots","numTargets","clouds","cannon","projectiles","score","currentPower","currentAngle","sun","gameWon","gameLost","targets2","projectiles2","score2","numTargets2","winner","undefined","winningScore","win","lose","positionsX","positionsY","i","shift","push","key","newAngle","newPower","rotateCannon","Object","values","filter","proj","length","clearRect","fillStyle","fillRect","cloud","moveCloud","drawCloud","value","drawCannon","drawTarget","collision","checkCollisions","drawProjectile","font","fillText","addEventListener","interval","now","then","elapsed","getContext","onload","cloudObjs","initialBackground","animate","Date","drawGame","finalText","color","classList","add","highscore","parseInt","innerHTML","split","gameOver","requestAnimationFrame","querySelector","e","preventDefault","modal","toggle","querySelectorAll","close","remove","includes","updateGame","difficulty","multValue","startGame","sounds","muted"],"mappings":"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","file":"main.js","sourcesContent":["export class Cloud {\n    constructor(posX, posY, cropStartX, cropStartY, cropEndX, cropEndY, sizeX, sizeY, source) {\n        this.posX = posX,\n        this.posY = posY,\n        this.cropStartX = cropStartX,\n        this.cropStartY = cropStartY,\n        this.cropEndX = cropEndX,\n        this.cropEndY = cropEndY,\n        this.sizeX = sizeX,\n        this.sizeY = sizeY,\n        this.speed = Math.random(),\n        this.source = source;\n\n    }\n\n    drawCloud(canvas, ctx) {\n        ctx.drawImage(this.source, this.cropStartX, this.cropStartY, this.cropEndX, this.cropEndY, this.posX, this.posY, this.sizeX, this.sizeY)\n    }\n\n    moveCloud(canvas, ctx) {\n        \n        let newXPos = Math.floor(this.posX - this.speed);\n        if (newXPos + this.sizeX < 0) {\n            newXPos = canvas.width;\n            this.posY = Math.floor(Math.random() * 30)\n        }\n        this.posX = newXPos;\n    }\n}","\n\nexport class Cannon {\n    constructor() {\n        this.picture = new Image();\n        this.picture.src = '../src/images/cannon_spritesheet.png'\n        this.x = -138.75,\n        this.y = -64.42,\n        this.width = 40,\n        this.height= 30,\n        this.frameX = -140,\n        this.frameY = 50,\n        this.firing = false,\n        this.rotation = 45;\n        this.state = 0;\n        \n    }\n\n    drawCannon(canvas, ctx, firing) {\n        \n            ctx.save()\n            // ctx.drawImage(this.picture, 0,0, 30, 30)\n            ctx.translate(canvas.width/2, canvas.height/2)\n            ctx.rotate(-this.rotation * 0.01745)\n            if (firing) {\n                \n                ctx.drawImage(this.picture, 60*(Math.floor(this.state/3)), 80, 60, 35, this.x, this.y, 25, 12)\n                ctx.translate(0,0)\n                ctx.restore()\n                let newState = this.state + 1;\n                if (newState < 24){\n                    this.state +=1;\n                    // return true;\n                } else {\n                    this.state = 0\n                    // return false;\n                }\n                return this.state;\n            } else {\n                ctx.drawImage(this.picture, 60 * (Math.floor(this.state / 3)), 80, 60, 35, this.x, this.y, 25, 12)\n                ctx.translate(0, 0)\n                ctx.restore()\n            }\n        \n    }\n\n    rotateCannon(bool){\n        \n        if (bool){\n            let newValue = this.rotation - 1;\n            if (newValue >= 0) {\n                this.rotation = newValue;\n                let radians = this.rotation*(0.01745);\n                let standardRadians = 19.7 * (0.01745);\n                this.x = -150*(Math.cos(radians-standardRadians)) - 3;\n                this.y = -150*(Math.sin(radians - standardRadians))\n                \n            }\n        } else {\n            let newValue = this.rotation + 1;\n            if (newValue <= 90) {\n                this.rotation = newValue;\n                let radians = this.rotation * (0.01745);\n                let standardRadians = 19.75  * (0.01745);\n                this.x = -150 * (Math.cos(radians - standardRadians)) -3;\n                this.y = -150 * (Math.sin(radians - standardRadians));\n            }\n        }\n    }\n}","export class Target {\n    constructor(xPos, yPos, player) {\n        this.xPos = xPos;\n        this.yPos = yPos;\n        this.state = 1;\n        this.flyPos = 0;\n        this.range = Math.floor(Math.random() * 100) + 30;\n        this.size = 20;\n        this.player = player;\n        if (player) {\n            this.flyUp = new Image();\n            this.flyUp.src = `../src/images/flyup_target${player}.png`;\n            this.flyDown = new Image();\n            this.flyDown.src = `../src/images/flydown_target${player}.png`;\n        }\n    }\n\n    drawTarget(canvas, ctx) {\n        if (this.flyPos < this.range/2) {\n\n            this.yPos += 1;\n            ctx.drawImage(this.flyUp, this.xPos, this.yPos, this.size,this.size);\n            this.flyPos +=1\n\n        } else {\n\n            this.yPos -= 1;\n            ctx.drawImage(this.flyDown, this.xPos, this.yPos, this.size, this.size);\n            this.flyPos +=1;\n\n            if (this.flyPos > this.range) {\n                this.flyPos = 0;\n            }\n            \n        }\n    }\n}","//RESOURCE\n//https://www.w3schools.com/graphics/game_sound.asp\n\nexport class Sound  {\n    constructor(id) {\n        this.sound = document.getElementById(id)\n    }\n\n    play() {\n        this.sound.play();\n    }\n\n    stop () {\n        this.sound.pause();\n        this.sound.currentTime = 0;\n    }\n}","import {Sound} from './sounds';\n\nexport class Projectile {\n    constructor(power, angle) {\n        this.projectile = new Image();\n        this.projectile.src = '../src/images/ball.png'; \n        this.xPos = 17;\n        this.yPos = 110;\n        this.power = power/2;\n        this.angle = angle;\n        this.dy = this.power * Math.sin(this.angle * 0.01745);\n        this.dx = this.power/2 * Math.cos(this.angle*0.01745);\n        this.xSize = 8;\n        this.ySize = 8;\n        this.hit = false;\n        this.timer = 1;\n        this.state = 1;\n        this.strike  = new Sound('hit-sound');\n        this.miss = new Sound('miss-sound');\n        this.shoot = new Sound('cannon-sound');\n    }\n\n    // update(power, angle) {\n    //     if (angle != this.angle) {\n\n    //     }\n    //     if (power != this.power) {\n    //         this.dy = this.power * Math.sin(this.angle * 0.01745);\n    //         this.dx = this.power * Math.cos(this.angle * 0.01745);\n    //     }\n    // }\n\n    drawProjectile(canvas, ctx, game) {\n        if (!this.hit) {\n            ctx.drawImage(this.projectile, 0, 0, 100, 100, this.xPos, this.yPos, this.xSize, this.ySize);\n            this.xPos += this.dx/2;\n            this.dy -= 1;\n            this.yPos -= this.dy/3;\n        } else {\n            ctx.drawImage(this.projectile, 64 * Math.floor((this.timer/4)%8), 64* Math.floor(this.timer/32), 60, 60, this.xPos, this.yPos, 20, 20)\n            this.timer += 1\n            if (this.timer > 64) {\n                this.state = 0\n                if (game.multiplayer) {\n                    game.currentPlayer = game.currentPlayer == 1 ? 2 : 1;\n                }\n            }\n        }\n    }\n\n    checkCollisions(targets, canvas, game) {\n        let that = this;\n        if (this.yPos > canvas.height - 25 || this.xPos > canvas.width) {\n            this.shoot.stop();\n            this.state = 0;\n            this.miss.play();\n            if (game.multiplayer) {\n                game.currentPlayer = game.currentPlayer == 1 ? 2 : 1;\n            }\n            game.previousShotsHit = 1;\n            return false;\n        }\n        let result = false;\n        \n        targets.forEach((target) => {\n            if (target.xPos - (that.xPos + that.xSize) < -5\n             && target.xPos + target.size - that.xPos > 0\n             && target.yPos - (that.yPos + that.ySize) < -5\n             && target.yPos + target.size - that.yPos > 0 \n             && !that.hit){\n                 this.shoot.stop();\n                 this.strike.play();\n                 this.hit = true;\n                 this.yPos = target.yPos;\n                 this.xPos = target.xPos;\n                that.projectile.src = '../src/images/explosion.png';\n                target.state = 0;\n                result = true;\n            }\n        })\n        return result;\n    }\n}","import { Target } from \"./target\";\nimport {Cannon } from './cannon';\nimport { Projectile } from \"./projectile\";\nimport {Cloud} from './clouds';\nimport { Sound } from './sounds';\n\nexport class Game {\n    constructor(numShots, numTargets, clouds, multiplayer) {\n        \n        this.numShots = numShots;\n        this.numTargets = numTargets;\n        this.cannon = new Cannon();\n        this.targets = [];\n        this.projectiles = {};\n        this.score = 0;\n        this.currentPower = 50;\n        this.currentAngle = 45;\n        this.previousShotsHit = 1;\n        this.clouds = clouds;\n        this.sun = new Image();\n        this.sun.src = '../src/images/sun.png';\n        this.firing = false;\n        this.gameWon = false;\n        this.gameLost = false;\n        this.multiplayer = multiplayer;\n        this.targets2 = [];\n        this.projectiles2 = [];\n        this.score2 = 0;\n        this.currentPlayer = 1;\n        this.numTargets2 = numTargets;\n        this.winner = undefined;\n        this.winningScore = undefined;\n        this.shoot = new Sound('cannon-sound');\n        this.win = new Sound('win');\n        this.lose = new Sound('gameover');\n        \n\n    }\n\n    startGame() {\n        let positionsX = [100, 130, 160, 185, 210, 230, 255, 270, 285, 265]\n        let positionsY = [10, 20, 30, 40 ,50, 10, 20, 30, 40, 50]\n        let target;\n        for (let i = 0; i < this.numTargets; i++) {\n            let xPos = positionsX.shift();\n            let yPos = positionsY.shift();\n            this.targets.push(new Target(xPos, yPos, 1));\n            if (this.multiplayer) {\n                this.targets2.push(new Target(xPos, yPos, 2));\n            }\n        }\n    }\n\n    updateGame(key) {\n        let newAngle;\n        let newPower;\n        if (key == 'ArrowLeft') {\n            this.cannon.rotateCannon(false);\n            newAngle = this.currentAngle + 1;\n            if (newAngle <=90) {\n                this.currentAngle = newAngle;\n            } \n        }\n        if (key == 'ArrowRight') {\n            this.cannon.rotateCannon(true);\n            newAngle = this.currentAngle - 1;\n            if (newAngle >= 0) {\n                this.currentAngle = newAngle;\n            }\n        }\n        if (key == 'ArrowUp') {\n            newPower = this.currentPower + 1;\n            if (newPower <= 100) {\n                this.currentPower = newPower;\n            }\n        }\n        if (key == 'ArrowDown') {\n            newPower = this.currentPower - 1;\n            if (newPower >= 0) {\n                this.currentPower = newPower;\n            }\n        }\n        if (key == ' ' && this.numShots > 0) {\n            \n            if (this.multiplayer) {\n                if (Object.values(this.projectiles).filter(proj => proj.state == 1).length < 1 &&\n                    Object.values(this.projectiles2).filter(proj => proj.state == 1).length < 1){\n                        \n                        this.shoot.play();\n                        this.firing = true;\n                    }\n            } else{\n                this.shoot.stop();\n                this.shoot.play();\n                this.firing = true;\n            }\n        }\n    }\n\n    drawGame(canvas, ctx) {\n        \n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(this.sun, canvas.width - 45, 0, 35, 35);\n        ctx.fillStyle = 'darkolivegreen';\n        ctx.fillRect(0, canvas.height - 30, canvas.width, 30)\n        this.clouds.forEach((cloud) => {\n            cloud.moveCloud(canvas, ctx);\n            cloud.drawCloud(canvas, ctx);\n        })\n        if (this.firing) {\n            let value = this.cannon.drawCannon(canvas, ctx, this.firing);\n            if (value == 10) {\n                if (this.multiplayer) {\n                    if (this.currentPlayer == 1) {\n                        this.projectiles[this.numShots] = new Projectile(this.currentPower, this.currentAngle);\n                    } else {\n                        this.projectiles2[this.numShots] = new Projectile(this.currentPower, this.currentAngle);\n                        this.numShots -= 1;\n                    }\n                } else{\n                    this.projectiles[this.numShots] = new Projectile(this.currentPower, this.currentAngle);\n                    this.numShots -= 1;\n                }\n\n            }\n            if (value == 0) {\n                this.firing = false;\n            } else {\n                this.firing = true;\n            }\n        } else {\n            this.cannon.drawCannon(canvas, ctx, this.firing);\n        }\n        \n        if (this.multiplayer) {\n            if (this.currentPlayer == 1) {\n                this.targets.forEach((target) => {\n                    if (target.state == 1) {\n                        target.drawTarget(canvas, ctx);\n                    }\n                })\n            } else {\n                this.targets2.forEach((target) => {\n                    if (target.state == 1) {\n                        target.drawTarget(canvas, ctx);\n                    }\n                })\n            }\n\n        } else {\n            this.targets.forEach((target) => {\n                if (target.state == 1) {\n                    target.drawTarget(canvas, ctx);\n                }\n            })\n        }\n       \n        let that = this;\n        let collision = false;\n        let result;\n        if (this.multiplayer) {\n            if (this.currentPlayer == 1) {\n                Object.values(this.projectiles).filter(proj => proj.state == 1).forEach((projectile) => {\n                    result = projectile.checkCollisions(this.targets.filter(target => target.state == 1), canvas, that);\n                    if (result) {\n                        collision = true;\n                    }\n                    if (projectile.state == 1) {\n                        projectile.drawProjectile(canvas, ctx, that);\n                    }\n                })\n\n                if (collision) {\n\n                    this.score += (10);\n                    // this.previousShotsHit += 1;\n                    this.numTargets -= 1;\n                }\n            } else {\n                Object.values(this.projectiles2).filter(proj => proj.state == 1).forEach((projectile) => {\n                    result = projectile.checkCollisions(this.targets2.filter(target => target.state == 1), canvas, that);\n                    if (result) {\n                        collision = true;\n                    }\n                    if (projectile.state == 1) {\n                        projectile.drawProjectile(canvas, ctx, that);\n                    }\n                })\n\n                if (collision) {\n\n                    this.score2 += (10);\n                    // this.previousShotsHit += 1;\n                    this.numTargets2 -= 1;\n                }\n            }\n\n        } else {\n            Object.values(this.projectiles).filter(proj => proj.state == 1).forEach((projectile) => {\n                result = projectile.checkCollisions(this.targets.filter(target => target.state == 1), canvas, that);\n                if (result) {\n                    collision = true;\n                }\n                if (projectile.state == 1) {\n                    projectile.drawProjectile(canvas, ctx, that);\n                }\n            })\n\n            if (collision) {\n\n                this.score += (10 * this.previousShotsHit);\n                this.previousShotsHit += 1;\n                this.numTargets -= 1;\n            }\n        }\n\n\n        //TEXT\n        \n        ctx.font = '9px Helvetica';\n        \n        if (this.multiplayer) {\n            let player = this.currentPlayer == 1? 'Player 1' : 'Player 2';\n            let score = this.currentPlayer == 1 ? this.score : this.score2;\n            ctx.fillStyle = 'darkslategray';\n            ctx.fillRect(0, 0, 55, 40);\n            ctx.fillStyle = 'lightgray';\n            ctx.fillRect(0, 0, 50, 35)\n            ctx.fillStyle = 'black';\n            ctx.fillText(`Angle: ${this.currentAngle}`, 5, 10)\n            \n            ctx.fillText(`Power: ${this.currentPower}`, 5, 20)\n            ctx.fillText(player, 5, 30)\n            ctx.fillText(`Shots: ${this.numShots}`, 10, 144);\n            ctx.fillText(`Player 1: ${this.numTargets} Targets`, 90, 144);\n            ctx.fillText(`Player 2: ${this.numTargets2} Targets`, 210, 144);\n            ctx.fillStyle = 'white'\n            ctx.fillText('Multiplayer', 120, 10)\n        } else {\n            ctx.fillStyle = 'darkslategray';\n            ctx.fillRect(0, 0, 55, 30);\n            ctx.fillStyle = 'lightgray';\n            ctx.fillRect(0, 0, 50, 25);\n            ctx.fillStyle = 'black';\n            ctx.fillText(`Angle: ${this.currentAngle}`, 5, 10)\n            ctx.fillText(`Power: ${this.currentPower}`, 5, 20)\n            ctx.fillText(`Shots: ${this.numShots}`, 10, 144);\n            ctx.fillText(`Targets: ${this.numTargets}`, 130, 144);\n            ctx.fillText(`Score: ${this.score}`, 250, 144);\n            ctx.fillStyle = 'white'\n            ctx.fillText('Solo', 135, 10)\n        }\n\n        if (this.multiplayer) {\n            // if (this.currentPlayer == 1){\n                if (this.numTargets < 1) {\n                    this.win.play();\n                    this.gameWon = true;\n                    this.winner = 'Player 1';\n                    this.winningScore = this.score;\n                } else if (this.numTargets2 < 1) {\n                     \n                        this.win.play();\n                        this.gameWon = true;\n                        this.winner = 'Player 2'\n                        this.winningScore = this.score2;\n                    \n                }\n            // }\n\n            if (this.numShots == 0 && Object.values(this.projectiles2).filter(proj => proj.state == 1).length < 1) {\n                if (this.score > this.score2) {\n                    this.win.play();\n                    this.gameWon = true;\n                    this.winner = 'Player 1';\n                    this.winningScore = this.score;\n                } else if(this.score < this.score2) {\n                    this.win.play();\n                    this.gameWon = true;\n                    this.winner = 'Player 2';\n                    this.winningScore = this.score2;\n                } else {\n                    this.gameLost = true;\n                    this.winningScore = this.score;\n                }\n            }  \n        }\n        else {\n            if (this.numTargets < 1) {\n                this.win.play();\n                this.gameWon = true;\n            } else if (this.numShots < 1 && Object.values(this.projectiles).filter(proj => proj.state == 1).length < 1) {\n                this.lose.play();\n                this.gameLost = true;\n            }\n        }\n\n    }\n}","import \"./styles/index.scss\";\nimport {setupModal} from './scripts/modal';\nimport {initialBackground} from './scripts/background'\nimport {Cannon} from './scripts/cannon'\nimport {Target} from './scripts/target'\nimport { Projectile } from \"./scripts/projectile\";\nimport { Game } from \"./scripts/game\";\nimport { gameOver } from \"./scripts/gameover\";\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const canvas = document.getElementById('canvas');\n    const ctx = canvas.getContext('2d');\n    const clouds = initialBackground(canvas, ctx);\n    const sun = new Image();\n    sun.src = '../src/images/sun.png';\n    setupModal();\n    const cannon = new Cannon();\n    cannon.drawCannon(canvas, ctx);\n    const target = new Target();\n    const projectile = new Projectile(30, 30);\n    \n    let fire = false;\n\n    //ADDING GAME\n    let gameStarted = false;\n    let game;\n\n\n    let fps, interval, startTime, now, then, elapsed;\n\n    function startAnimating(fps) {\n        interval = 1000 / fps;\n        then = Date.now();\n        startTime = then;\n        animate();\n    }\n\n    function animate() {\n        \n        \n\n        now = Date.now();\n        elapsed = now - then;\n\n        if (elapsed > interval) {\n            \n            then = now - (elapsed % interval);\n\n            // ctx.clearRect(0,0, canvas.width, canvas.height);\n            // ctx.drawImage(sun, canvas.width - 45, 0, 35, 35);\n            // ctx.fillStyle = 'green';\n            // ctx.fillRect(0, canvas.height - 25, canvas.width, 25)\n            // clouds.forEach((cloud) => { \n            //         cloud.moveCloud(canvas, ctx);\n            //         cloud.drawCloud(canvas, ctx);\n            // })\n            // cannon.drawCannon(canvas, ctx);\n            // target.drawTarget(canvas, ctx);\n            \n            // if (fire) {\n            //     projectile.drawProjectile(canvas, ctx);  \n            // }\n\n        game.drawGame(canvas, ctx)\n            \n        }\n        if (game.gameWon || game.gameLost) {\n            gameOver(game, ctx, canvas);\n        } else{\n            requestAnimationFrame(animate);\n        }\n        \n    }\n\n    document.addEventListener('keydown', (e) => {\n        const validGameKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', ' '];\n        // if (event.key === 'ArrowLeft') {\n        //     cannon.rotateCannon(false);\n        // }\n        // if (event.key === 'ArrowRight') {\n        //     cannon.rotateCannon(true);\n        // }\n        // if (event.key === ' '){\n        //      fire = true;\n             \n        // }\n        \n        if (validGameKeys.includes(e.key)){\n            game.updateGame(e.key)\n        } else if(e.key == 'Enter') {\n            e.preventDefault();\n            gameStarted = true;\n            let difficulty = document.getElementById('difficulty').value;\n            let multiplayer = document.getElementById('multiplayer').value;\n            let multValue = multiplayer == 'true' ? true : false;\n            \n            switch (difficulty) {\n                case 'easy':\n                    game = new Game(4, 2, clouds, multValue);\n                    break;\n                case 'medium':\n                    game = new Game(6, 4, clouds, multValue);\n                    break;\n                case 'hard':\n                    game = new Game(8, 6, clouds, multValue);\n                    break;\n                case 'impossible':\n                    game = new Game(10, 10, clouds, multValue);\n                    break;\n                default:\n                    break;\n            }\n            // game = new Game(shots,targets,clouds);\n            game.startGame();\n            startAnimating(30);\n            // document.getElementById('start-button').innerHTML = 'Restart';\n            canvas.classList.remove('lost', 'won')\n        } else {\n            return;\n        }\n\n\n\n    })\n\n    document.getElementById('mute').addEventListener('click', (e) => {\n        e.target.classList.toggle('fa-volume-up');\n        e.target.classList.toggle('fa-volume-off')\n        \n        let sounds = document.querySelectorAll('audio');\n        if (sounds[0].muted) {\n            sounds.forEach((sound) => sound.muted = false)\n        } else {\n            sounds.forEach((sound) => sound.muted = true)\n        }\n    })\n\n    // if (gameStarted){\n    //     startAnimating(30);\n    // }\n\n    //Start game button\n    // const startButton = document.getElementById('start-button');\n    // startButton.addEventListener('click',(e) => {\n        \n    //     e.preventDefault();\n    //     gameStarted = true;\n    //     let difficulty = document.getElementById('difficulty').value;\n    //     let multiplayer = document.getElementById('multiplayer').value;\n    //     let multValue = multiplayer == 'true' ? true : false;\n    //     \n    //     switch (difficulty) {\n    //         case 'easy':\n    //             game = new Game(4, 2, clouds, multValue);\n    //             break;\n    //         case 'medium':\n    //             game = new Game(6, 4, clouds, multValue);\n    //             break;\n    //         case 'hard':\n    //             game = new Game(8, 6, clouds, multValue);\n    //             break;\n    //         case 'impossible':\n    //             game = new Game(10, 10, clouds, multValue);\n    //             break;\n    //         default:\n    //             break;\n    //     }\n    //     // game = new Game(shots,targets,clouds);\n    //     game.startGame();\n    //     startAnimating(30);\n    //     document.getElementById('start-button').innerHTML = 'Restart';\n    //     canvas.classList.remove('lost', 'won')\n    // })\n\n   \n})\n","import {Cloud} from './clouds'\n\nexport const initialBackground = (canvas, ctx) => {\n    const sun = new Image();\n    sun.src = '../src/images/sun.png';\n    sun.onload = () => {\n        ctx.drawImage(sun, canvas.width - 45,0 , 35, 35)\n    }\n    const clouds = new Image();\n    clouds.src = '../src/images/clouds.png';\n    const cloudObjs = [new Cloud(30, 25, 0, 0, 390, 220, 40, 30, clouds), \n                        new Cloud(200, 10, 400, 120, 330, 150, 35, 25, clouds),\n                        new Cloud(280, 35, 400, 120, 330, 150, 35, 25, clouds),\n                        new Cloud(100, 5, 300, 275, 300, 160, 30, 20, clouds )]\n    clouds.onload = () => {\n        cloudObjs.forEach(cloud => {\n            // if ([1,2][Math.floor(Math.random() * 3)] % 2 != 0) return;\n\n            ctx.drawImage(clouds, cloud.cropStartX, cloud.cropStartY, cloud.cropEndX, cloud.cropEndY, cloud.posX, cloud.posY, cloud.sizeX, cloud.sizeY)\n        })\n\n    }\n    ctx.fillStyle = 'darkolivegreen';\n    ctx.fillRect(0, canvas.height - 30, canvas.width, 30);\n    ctx.fillStyle = 'black';\n    ctx.font = '15px Times New Roman';\n    ctx.fillText('Click Enter to Begin!', 90, 80)\n    return cloudObjs;\n}","export const gameOver = (game, ctx, canvas) => {\n    let finalText, color,  xPos;\n    if (game.multiplayer) {\n        if (game.gameLost) {\n            finalText = 'Looks like it was a tie!';\n            color = 'gold';\n            canvas.classList.add('won');\n            xPos =75;\n            let highscore = document.getElementById('highscore');\n            let score = parseInt(highscore.innerHTML.split(' ')[2])\n            \n            if (score < game.winningScore) {\n                highscore.innerHTML = `High Score: ${game.winningScore}`\n            }\n        } else {\n            finalText = `Congrats ${game.winner}, great shooting!`;\n            color = 'gold';\n            canvas.classList.add('won');\n            xPos = 40;\n            let highscore = document.getElementById('highscore');\n            let score = parseInt(highscore.innerHTML.split(' ')[2])\n            \n            if (score < game.winningScore) {\n                highscore.innerHTML = `High Score: ${game.winningScore}`\n            }\n        }\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.font = '15px Fantasy';\n        ctx.fillStyle = color;\n        ctx.fillText(finalText, xPos, 70);\n        if (game.gameWon) {\n            ctx.font = '10px Fantasy';\n            ctx.fillText(`Player 1: ${game.score} points`, xPos + 10, 85)\n            ctx.fillText(`Player 2: ${game.score2} points`, xPos + 130, 85);\n            ctx.font = '10px Times New Roman';\n            ctx.fillText('Click Enter to play again', 95, 140)\n        } else {\n            ctx.font = '10px Fantasy';\n            ctx.fillText('Why not give it another shot?', xPos + 5, 85);\n            ctx.font = '10px Times New Roman';\n            ctx.fillText('Click Enter to play again', 95, 140);\n        }\n    } else {\n        if (game.gameWon) {\n            \n            finalText = 'Great shooting, you won!';\n            color = 'gold';\n            canvas.classList.add('won');\n            xPos = 65;\n            let highscore = document.getElementById('highscore');\n            let score = parseInt(highscore.innerHTML.split(' ')[2])\n            \n            if (score < game.score) {\n                highscore.innerHTML = `High Score: ${game.score}`\n            }\n        } else {\n            finalText = 'Sorry, you ran out of shots';\n            color = 'red';\n            canvas.classList.add('lost');\n            xPos = 60;\n        }\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.font = '15px Fantasy';\n        ctx.fillStyle = color;\n        ctx.fillText(finalText, xPos , 70);\n        if (game.gameWon) {\n            ctx.font = '10px Fantasy';\n            ctx.fillText(`Score: ${game.score}`, xPos + 10, 85)\n            ctx.fillText(`Shots remaining: ${game.numShots}`, xPos + 80, 85);\n            ctx.font = '10px Times New Roman';\n            ctx.fillText('Click Enter to play again', 95, 140)\n\n        } else {\n            ctx.font = '10px Fantasy';\n            ctx.fillText('Why not give it another shot?', xPos + 20, 85);\n            ctx.font = '10px Times New Roman';\n            ctx.fillText('Click Enter to play again', 95, 140);\n        }\n    }\n\n\n\n    \n\n\n}","\nexport const setupModal = () => {\n    const modalTrigger = document.querySelector('.how-to-link');\n    modalTrigger.addEventListener('click', (e) => {\n        e.preventDefault();\n        const modal = document.getElementById('modal');\n        modal.classList.toggle('open');\n        const modalCloses = document.querySelectorAll('.modal-exit')\n        modalCloses.forEach((close) => {\n            close.addEventListener('click', (e) => {\n                e.preventDefault();\n                modal.classList.remove('open');\n            })\n        })\n    })\n}"],"sourceRoot":""}